#version 450 core
#extension GL_ARB_bindless_texture : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout(std430, binding = 4) buffer ssbo_textures {
    uvec2 textureSamplerers[];
};
layout(binding = 31) uniform sampler2D uHDRI;

layout(location = 0) uniform float uTime;
layout(location = 1) uniform ivec2 uRes;
layout(location = 2) uniform mat3 uCamMat;
layout(location = 3) uniform vec3 uCamPos;
layout(location = 4) uniform float uFOV;
layout(location = 5) uniform float uMaxBounce;
layout(location = 6) uniform float uRayPerPixel;

struct MeshInfo {
    uint startIndex;
    uint size;
    uint matID;
};

struct Triangle {
    vec3 posA;
    vec3 posB;
    vec3 posC;
    vec3 normal;
    vec2 uvA;
    vec2 uvB;
    vec2 uvC;
};

struct MatInfo {
    uint diffIndex;
    uint roughIndex;
    uint normIndex;
    float emissionStrength;
};

layout(std430, binding = 1) buffer ssbo_trigs {
    Triangle trigs[];
};

layout(std430, binding = 2) buffer ssbo_mesh {
    MeshInfo meshes[];
};

layout(std430, binding = 3) buffer ssbo_mats {
    MatInfo mats[];
};

struct Ray {
    vec3 origin;
    vec3 dir;
};

struct HitInfo {
    bool didHit;
    float dst;
    vec3 hitPoint;
    vec2 uv;
    vec3 normal;
    uint matID;
};

float RandomValue(inout uint state) {
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result / 4294967295.0;
}

float RandomValueNormalDistribution(inout uint state) {
    float theta = 2 * 3.1415926 * RandomValue(state);
    float rho = sqrt(-2 * log(RandomValue(state)));
    return rho * cos(theta);
}

vec3 RandomDirection(inout uint state) {
    float x = RandomValueNormalDistribution(state);
    float y = RandomValueNormalDistribution(state);
    float z = RandomValueNormalDistribution(state);
    return normalize(vec3(x, y, z));
}

vec3 RandomHemisphereDirection(vec3 normal, inout uint rngState) {
    vec3 dir = RandomDirection(rngState);
    return dir * sign(dot(normal, dir));
}

vec2 RandomPointInCircle(inout uint rngState) {
    float angle = RandomValue(rngState) * 2 * 3.1415926;
    vec2 pointOnCircle = vec2(cos(angle), sin(angle));
    return pointOnCircle * sqrt(RandomValue(rngState));
}

vec2 directionToUV(vec3 dir) {
    // Normalize the direction to ensure correctness
    dir = normalize(dir);

    // Calculate equirectangular UV coordinates
    float u = atan(dir.z, dir.x) / (2.0 * 3.1415926) + 0.5;
    float v = 0.5 - asin(dir.y) / 3.1415926;

    return vec2(u, v);
}

vec3 applyNormalMap(vec3 norm, vec3 normColor) {
    // Sample the normal map and decode it to tangent space
    vec3 tangentNormal = normalize(normColor * 2.0 - 1.0);

    // Calculate the TBN matrix
    vec3 tangent, bitangent;

    if (abs(norm.y) > 0.999) { // Top or bottom face (normal aligned with Y-axis)
        tangent = vec3(1.0, 0.0, 0.0); // Lock tangent to X-axis
        bitangent = vec3(0.0, 0.0, norm.y); // Align bitangent with Z-axis (depends on up/down)
    } else {
        tangent = normalize(vec3(-norm.z, 0.0, norm.x)); // General tangent
        bitangent = normalize(cross(norm, tangent)); // Bitangent from cross product
    }

    // Transform tangent-space normal to object/world space
    mat3 TBN = mat3(tangent, bitangent, norm);
    vec3 perturbedNormal = normalize(TBN * tangentNormal);

    return perturbedNormal;
}

HitInfo RayTriangle(Ray ray, Triangle tri) {
    vec3 edgeAB = tri.posB.xyz - tri.posA.xyz;
    vec3 edgeAC = tri.posC.xyz - tri.posA.xyz;
    vec3 norm = cross(edgeAB, edgeAC);
    vec3 ao = ray.origin - tri.posA.xyz;
    vec3 dao = cross(ao, ray.dir);

    float det = -dot(ray.dir, norm);
    float invDet = 1 / det;

    float dst = dot(ao, norm) * invDet;
    float u = dot(edgeAC, dao) * invDet;
    float v = -dot(edgeAB, dao) * invDet;
    float w = 1 - u - v;

    HitInfo info;
    info.didHit = det >= 1e-6 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
    info.uv = tri.uvA * w + tri.uvB * u + tri.uvC * v;
    info.normal = normalize(tri.normal);
    info.hitPoint = ray.origin + ray.dir * dst + info.normal * 1e-4;
    info.dst = dst;

    return info;
}

HitInfo CalculateRayCollision(Ray ray) {
    HitInfo closestHit;
    closestHit.dst = 1000.0;
    closestHit.didHit = false;
    closestHit.normal = vec3(0.0);
    closestHit.matID = 0;
    closestHit.uv = vec2(0.0);
    closestHit.hitPoint = vec3(0.0);

    for (uint i = 0; i < meshes.length(); i++) {
        MeshInfo mesh = meshes[i];
        for (uint j = mesh.startIndex; j < mesh.size + mesh.startIndex; j++) {
            Triangle tri = trigs[j];
            HitInfo info = RayTriangle(ray, tri);

            // Output the result
            if (info.didHit && info.dst < closestHit.dst) {
                closestHit = info;
                closestHit.matID = mesh.matID;
            }
        }
    }

    return closestHit;
}

vec3 DisneyDiffuse(vec3 norm, vec3 viewDir, vec3 lightDir, vec3 albedo, float roughness) {
    // Compute angles
    float cosThetaI = max(dot(norm, lightDir), 0.0); // Incident angle
    float cosThetaO = max(dot(norm, viewDir), 0.0); // Outgoing angle

    // Half-vector
    vec3 halfVector = normalize(lightDir + viewDir);

    // Retro-reflection term
    float retroReflection = (1.0 - cosThetaO) * (1.0 - cosThetaI);
    retroReflection *= (1.0 - 0.5 * roughness);

    // Disney Diffuse BRDF
    vec3 diffuse = albedo / 3.141592;
    float retroFactor = 1.0 + retroReflection * pow(1.0 - cosThetaI, 5.0) * roughness;
    return diffuse * retroFactor;
}

vec3 SampleBRDF(vec3 norm, vec3 dir, vec2 uv, inout uint rngState) {
    return normalize(norm + RandomDirection(rngState));
}

float CalculateBRDFPDF(vec3 norm, vec3 dir, vec3 sampleDir, vec2 uv) {
    return max(0.0001, dot(norm, sampleDir)) / 3.141592; // Cosine-weighted PDF
}

vec3 EvaluateBRDF(vec3 norm, vec3 viewDir, vec3 lightDir, vec3 albedo, float roughness) {
    return DisneyDiffuse(norm, viewDir, lightDir, albedo, roughness);
}

vec3 Trace(Ray ray, inout uint rngState) {
    vec3 incommingLight = vec3(0);
    vec3 rayColor = vec3(1);

    for (int i = 0; i < uMaxBounce; i++) {
        HitInfo info = CalculateRayCollision(ray);
        if (info.didHit) {
            ray.origin = info.hitPoint;
            MatInfo mat = mats[info.matID];
            vec3 albedo = texture(sampler2D(textureSamplerers[mat.diffIndex]), info.uv).rgb;
            vec3 normColor = texture(sampler2D(textureSamplerers[mat.normIndex]), info.uv).rgb;
            float rough = texture(sampler2D(textureSamplerers[mat.roughIndex]), info.uv).r;

            // Diffuse
            vec3 norm = applyNormalMap(info.normal, normColor);
            vec3 brdfSampleDir = SampleBRDF(norm, ray.dir, info.uv, rngState);
            float brdfPDF = CalculateBRDFPDF(norm, ray.dir, brdfSampleDir, info.uv);
            vec3 brdfValue = EvaluateBRDF(norm, ray.dir, brdfSampleDir, albedo, rough);

            ray.dir = brdfSampleDir;
            rayColor *= brdfValue * dot(norm, ray.dir) / brdfPDF;

            incommingLight += mat.emissionStrength * rayColor;

            // Terminate if ray contribution is negligible
            if (rayColor == vec3(0)) break;
        } else {
            vec2 uv = directionToUV(ray.dir);
            vec3 hdriColor = texture(uHDRI, uv).rgb;
            incommingLight += hdriColor * rayColor;
            break;
        }
    }

    return incommingLight;
}

vec4 Render(ivec2 texelCoord) {
    vec2 uv = (vec2(texelCoord) + 0.5) / vec2(uRes) * 2.0 - 1.0;

    float aspectRatio = float(uRes.x) / float(uRes.y);
    uv.x *= aspectRatio;

    float scale = tan(radians(uFOV) * 0.5);

    uint pixelIndex = texelCoord.y * uRes.x + texelCoord.x;
    uint rngState = pixelIndex + uint(uTime) * 719393;

    vec3 totalIncomingLight = vec3(0);

    for (int i = 0; i < uRayPerPixel; i++) {
        Ray ray;
        ray.origin = uCamPos;

        vec2 jitter = RandomPointInCircle(rngState) * 2;
        vec2 jitteredUV = uv + jitter / vec2(uRes);
        vec3 jitteredDir = normalize(uCamMat * vec3(jitteredUV * scale, -1.0));

        ray.dir = jitteredDir;

        totalIncomingLight += Trace(ray, rngState);
    }

    vec3 pixelCol = totalIncomingLight / uRayPerPixel;

    return vec4(pixelCol, 1.0);
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec4 result = Render(texelCoord);

    imageStore(imgOutput, texelCoord, result);
}
